1.Shovels and Swords

fun main() {
    repeat(readLine()!!.toInt()) {
        var (a, b) = readLine()!!.split(" ").map { it.toInt() }
        if (a < b)
            b = a.also { a=b }
        val c: Int = when {
            b <= a/2 -> b
            else -> (a+b)/3
        }
        println(c)
    }
}

accepted


2.Shuffle

fun main() {
    repeat(readLine()!!.toInt()) {
        val (_, index, swap_times) = readLine()!!.split(" ").map { it.toInt() }
        var s = index
        var e = index
        repeat(swap_times) {
            val (start, end) = readLine()!!.split(" ").map { it.toInt() }
            if (s in start..end || e in start..end){
                e = maxOf(e, end)
                s = minOf(s, start)
               
            }
        }
        println(e-s+1)
    }
}

accepted


3.Palindromic Paths

fun main() {
    repeat(readLine()!!.toInt()) {
        val (row, column) = readLine()!!.split(" ").map { it.toInt() }
        val zeroCount = MutableList(column + row - 1) { 0 }
        val oneCount = MutableList(column + row - 1) { 0 }
        repeat(row) {
            val list = readLine()!!.split(" ").map { it.toInt() }
            for (i in 0..column - 1) {
                val index = i + it
                if (list[i] == 0) {
                    zeroCount[index] += 1
                } else {
                    oneCount[index] += 1
                }
            }
        }
        var change = 0
        for (i in 0..(column + row - 1) / 2 - 1) {
            val sumZero = zeroCount[i] + zeroCount[column + row - 2 - i]
            val sumOne = oneCount[i] + oneCount[column + row - 2 - i]

            change += minOf(sumOne, sumZero)
        }
        println(change)
    }
}

accepted
