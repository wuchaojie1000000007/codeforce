A - Acacius and String

fun main() {
    val r = System.`in`.bufferedReader()
    val s = StringBuilder()
    val t = "abacaba".toCharArray()
    small@for (k in 0 until r.readLine().toInt()) {
        val length = r.readLine()!!.toInt()
        val str = r.readLine()!!.toCharArray()
        big@for (i in 0..length - 7) {
            val m = str.clone()
            for (j in 0..6) {
                if (m[i + j] != t[j] && m[i + j] != '?') {
                    continue@big
                }
                m[i + j] = t[j]
            }
            var cnt = 0
            val n = m.map { if (it=='?') 'z' else it }.toCharArray()
            for (j in 0..length - 7){
                if (n.copyOfRange(j, j+7).contentEquals(t)){
                    cnt += 1
                }
            }
            if (cnt == 1) {
                s.appendln("YES")
                s.appendln(n)
                continue@small
            } else continue@big
        }
        s.appendln("NO")
    }
    print(s)
}

Accepted	171 ms	22600 KB


B - Dubious Cyrpto

fun main() {
    val re = System.`in`.bufferedReader()
    val s = StringBuilder()
    loop@ for (i in 0 until re.readLine()!!.toInt()) {
        val (l, r, m) = re.readLine()!!.split(" ").map { it.toLong() }
        loop2@ for (j in l..r){
            val a = j
            val n = (m+r-l)/a
            if (n<1) continue@loop2
            if (n*a>=m-r+l && n*a<=m+r-l){
                if (m-n*a>=0){
                    val c = l
                    val b = l+m-n*a
                    s.appendln("$a $b $c")
                    continue@loop
                } else {
                    val c = r
                    val b = r-(a*n-m)
                    s.appendln("$a $b $c")
                    continue@loop
                }
            }
        }
    }
    print(s)
}

Accepted	124 ms	21600 KB


C - Choosing flowers

fun main() {
    val r = System.`in`.bufferedReader()
    val s = StringBuilder()
    repeat(r.readLine()!!.toInt()) {
        if (it > 0) r.readLine()
        val (n, m) = r.readLine()!!.split(" ").map { it.toInt() }

        val fl = Array(m) {
            val Line = r.readLine()!!.split(" ")
            Pair(Line[0].toInt(), Line[1].toInt())
        }

        fl.sortBy { it.first }

        val iSum = LongArray(m) { 0L }
        iSum[m - 1] = fl[m - 1].first.toLong()
        (m - 2 downTo 0).forEach {
            iSum[it] = iSum[it + 1] + fl[it].first
        }

        var max = 0L

        fun bs(x: Int): Int {
            if (x >= fl.last().first) return -1
            var l = 0
            var r = m
            while (r > l) {
                val mid = l + (r - l) / 2
                when {
                    fl[mid].first < x -> l = mid + 1
                    fl[mid].first == x -> l += 1
                    fl[mid].first > x -> r = mid
                }
            }
            return l
        }

        if (n == 1) {
            max = fl.last().first.toLong()
        } else {
            for (i in 0..m - 1) {
                val base = fl[i].second
                val index = bs(base)
                when {
                    index == -1 -> max =
                        maxOf(max, base * (n - 1).toLong() + fl[i].first)
                    m - index >= n -> {
                        max = maxOf(max, iSum[m - n])
                    }
                    else -> {
                        val other =
                            if (index > i) (n - m + index - 1) * base.toLong() + fl[i].first
                            else (n - m + index) * base.toLong()
                        max = maxOf(max, other + iSum[index])
                    }
                }
            }
        }
        s.appendln(max)
    }
    print(s)
}

Accepted	764 ms	26500 KB
