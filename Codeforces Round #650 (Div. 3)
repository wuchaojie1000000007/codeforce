A - Short Substrings

fun main() {
    repeat(readLine()!!.toInt()){
        val str = readLine()!!.split("").toMutableList()
        str.removeAt(str.size-1)
        str.removeAt(0)
        val first = str[0]
        val last = str[str.size-1]
        str.removeAt(str.size-1)
        str.removeAt(0)
        val newList = mutableListOf<String>(first)
        for (i in 0..str.size-1) {
            if (i % 2 == 0)
                newList.add(str[i])
        }
        newList.add(last)
        println(newList.joinToString(""))
    }
}

in queue -> accepted


B - Even Array

fun main() {
    repeat(readLine()!!.toInt()) {
        val size = readLine()!!.toInt()
        val list = readLine()!!.split(" ").map { it.toInt() % 2 }
        val evenNum = list.count { it == 0 }
        val oddNum = size - evenNum
        val possible = when {
            size % 2 == 0 -> evenNum == oddNum
            else -> evenNum - 1 == oddNum
        }
        if (possible) {
            var changeTime = 0
            for (i in 0..size-1 step 2) {
                if (list[i]==1)
                    changeTime +=1
            }
            println(changeTime)
        } else {
            println(-1)
        }
    }
}

in queue -> accepted


C - Social Distance

fun main() {
    repeat(readLine()!!.toInt()) {
        val (_, k) = readLine()!!.split(" ").map { it.toInt() }
        val pre = MutableList(k+1) {0}
        pre[0] = 1
        val suf =  MutableList(k+1) {0}
        suf[k] = 1
        var tabelsList = readLine()!!
        tabelsList = pre.joinToString("") + tabelsList + suf.joinToString("")


        val num = tabelsList.split("1").map { it.length }.filter { it > 2*k }.map { (it-k)/(k+1) }

        if (num.size == 0)
            println(0)
        else
            println(num.sum())
    }
}

accepted


D - Task On The Board


import kotlin.math.absoluteValue

fun main() {
    repeat(readLine()!!.toInt()) {
        val str = readLine()!!.groupBy { it }.mapValues { (k, v) -> v.size }.toMutableMap()
        val size = readLine()!!.toInt()
        var list = readLine()!!.split(" ").map { it.toInt() }.toMutableList()
        val strList = MutableList(size) { 'a' }
        while (list.any { it >= 0 }) {

            // Find where is 0
            val indexList = mutableListOf<Int>()
            for (i in 0..size - 1) {
                if (list[i] == 0) {
                    indexList += i
                }
            }

            val zeroNum = indexList.size

            val max = str.maxBy { (k, v) -> k }

            val letterNum = max?.value
            if (letterNum != null) {
                when {
                    letterNum >= zeroNum -> {
                        for (item in indexList) {
                            strList[item] = max.key
                            list = reduce(item, list)
                        }

                    }
                }
            }
            str.remove(max?.key)
        }
        println(strList.joinToString(""))
    }
}

fun reduce(index: Int, list: MutableList<Int>): MutableList<Int> {
    val size = list.size
    for (i in 0..size - 1) {
        list[i] -= (index - i).absoluteValue
    }
    list[index]-=1
    return list
}

accepted  a little bit messy
