A - Maximum GCD

fun main() {
    repeat(readLine()!!.toInt()) {
        val size = readLine()!!.toInt()
        println(size/2)
    }
}

accepted


B - GCD Compression	

fun main() {
    repeat(readLine()!!.toInt()) {
        val n = readLine()!!.toInt()
        val list = readLine()!!.split(" ").map { it.toInt() }.map { it % 2 }
        var oddIndex = -1
        var evenIndex = -1
        var printTime = 0
        for (index in 0..list.size-1) {
            when(list[index]) {
                1 -> {
                    if (oddIndex != -1) {
                        println("${oddIndex+1} ${index+1}")
                        printTime += 1
                        oddIndex = -1
                    } else {
                        oddIndex = index
                    }
                }
                0 -> {
                    if (evenIndex != -1) {
                        println("${evenIndex+1} ${index+1}")
                        printTime += 1
                        evenIndex = -1
                    } else {
                        evenIndex = index
                    }
                }
            }
            if (printTime == n - 1) {
                break
            }
        }
    }
}

accepted

C. Number Game

// 得到非 1 奇数赢  得偶数不能 -1 否则输   得偶数除 奇数divisor     a 个 偶  b 个 奇数
fun main() {
    repeat(readLine()!!.toInt()) {
        val n = readLine()!!.toInt()
        when {
            n==1 -> println("FastestFinger")
            n % 2 == 1 -> println("Ashishgup")
            //n == 2 -> println("Ashishgup")
            else -> result(n)

        }
    }

}

fun result(int: Int) {
    val list = Factorization(int)
    val (evenNum, oddNum) = list.partition { it % 2 == 0 }
    if (evenNum.size == 1) {
        when{
            oddNum.size % 2 == 0 -> println("Ashishgup")
            else -> println("FastestFinger")
        }
    } else {
        when {
            oddNum.size % 2 == 0 -> println("FastestFinger")
            else -> println("Ashishgup")
        }
    }
}

fun Factorization(int: Int): List<Int> {
    val factorList = mutableListOf<Int>()

    var num = int
    var factor = 2
    while (int >= factor) {
        if (num % factor == 0){
            num /= factor
            factorList += factor
        } else factor += 1
    }
    return factorList
}

Wrong answer on test 2

