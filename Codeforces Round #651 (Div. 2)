A - Maximum GCD

fun main() {
    repeat(readLine()!!.toInt()) {
        val size = readLine()!!.toInt()
        println(size/2)
    }
}

accepted


B - GCD Compression	

fun main() {
    repeat(readLine()!!.toInt()) {
        val n = readLine()!!.toInt()
        val list = readLine()!!.split(" ").map { it.toInt() }.map { it % 2 }
        var oddIndex = -1
        var evenIndex = -1
        var printTime = 0
        for (index in 0..list.size-1) {
            when(list[index]) {
                1 -> {
                    if (oddIndex != -1) {
                        println("${oddIndex+1} ${index+1}")
                        printTime += 1
                        oddIndex = -1
                    } else {
                        oddIndex = index
                    }
                }
                0 -> {
                    if (evenIndex != -1) {
                        println("${evenIndex+1} ${index+1}")
                        printTime += 1
                        evenIndex = -1
                    } else {
                        evenIndex = index
                    }
                }
            }
            if (printTime == n - 1) {
                break
            }
        }
    }
}

accepted

C. Number Game

// 得到非 1 奇数赢  得偶数不能 -1 否则输   得偶数除 奇数divisor     a 个 偶  b 个 奇数
fun main() {
    repeat(readLine()!!.toInt()) {
        val n = readLine()!!.toInt()
        when {
            n==1 -> println("FastestFinger")
            n % 2 == 1 -> println("Ashishgup")
            else -> result(n)

        }
    }

}

fun result(int: Int){
    val (evenNum, oddNum) = Factorization(int)
    //println("$int $oddNum $evenNum")
    when {
        evenNum > 1 && oddNum == 0 -> println("FastestFinger")
        evenNum == 1 && oddNum == 1 -> println("FastestFinger")
        else -> println("Ashishgup")
    }
}

fun Factorization(int: Int): Pair<Int, Int> {

    var num = int
    var oddNum = 0
    var evenNum = 0
    while (num % 2 == 0) {
        num /=2
        evenNum += 1
    }
    var factor = 3
    while (num >= factor) {
        if (num % factor == 0){
            num /= factor
            oddNum += 1
            if (num != 1) {
                oddNum += 1
            }
            break
        } else factor += 2
    }
    return Pair(evenNum, oddNum)
}

Time limit exceeded on test 4


D - Odd-Even Subsequence	

fun main() {
    val (n, k) = readLine()!!.split(" ").map { it.toInt() }
    val List = readLine()!!.split(" ").map { it.toInt() }
    val binarySearchList = List.sorted()
    var lowerBound = 0
    var upperBound = n - 1
    //var (cost, mid) = getCost(binarySearchList, lowerBound, upperBound)
    //val oddSubsequenceSize = constructSubsequence(List, 1, cost)
    //val evenSubsequenceSize = constructSubsequence(List, 0, cost)

    while (lowerBound != upperBound) {
        //println("Do odd")
        val (cost, mid) = getCost(binarySearchList, lowerBound, upperBound)
        //println("cost:$cost mid:$mid")
        val oddSubsequenceSize = constructSubsequence(List, 1, cost)
        //println("seqSize:$oddSubsequenceSize")

        // Cost need bigger
        if (oddSubsequenceSize < k) {
            lowerBound = mid + 1
        }

        // Cost can smaller
        if (oddSubsequenceSize >= k) {
            upperBound = mid
        }
        //println("lowerBound:$lowerBound upperBound:$upperBound")

        //val (_cost, _mid) = getCost(binarySearchList, lowerBound, upperBound)
        //cost = _cost
        //mid = _mid
    }
    val oddCost = binarySearchList[lowerBound]
    lowerBound = 0
    upperBound = n - 1

    while (lowerBound != upperBound) {
        //println("Do even")
        val (cost, mid) = getCost(binarySearchList, lowerBound, upperBound)
        //println("cost:$cost mid:$mid")
        val oddSubsequenceSize = constructSubsequence(List, 0, cost)
        //println("seqSize:$oddSubsequenceSize")
        // Cost need bigger
        if (oddSubsequenceSize < k) {
            lowerBound = mid + 1
        }

        // Cost can smaller
        if (oddSubsequenceSize >= k) {
            upperBound = mid
        }
        //println("lowerBound:$lowerBound upperBound:$upperBound")
    }
    val evenCost = binarySearchList[lowerBound]
    //println(oddCost)
    //println(evenCost)
    println(minOf(oddCost, evenCost))
}

fun getCost(binarySearchList: List<Int>, lowerBound: Int, upperBound: Int): Pair<Int, Int> {
    if (upperBound >= lowerBound)
        return Pair(binarySearchList[(lowerBound + upperBound) / 2], (lowerBound + upperBound) / 2)
    else return Pair(binarySearchList[lowerBound], -1)
}

fun constructSubsequence(list: List<Int>, oddOrEven: Int, cost: Int): Int {
    //val subsequence = mutableListOf<Int>()
    var subsequenceSize = 0
    for (i in 0..list.size - 1) {
        if (   ((subsequenceSize + 1) % 2 == oddOrEven && list[i] <= cost)   ||    subsequenceSize % 2 == oddOrEven    ) {
            //subsequence += list[i]
            subsequenceSize += 1
        }
    }
    return subsequenceSize
}

accepted


E - Binary Subsequence Rotation

fun main() {
    val size = readLine()!!.toInt()

    val a = readLine()!!.split("").toMutableList()
    a.removeAt(size + 1)
    a.removeAt(0)

    val b = readLine()!!.split("").toMutableList()
    b.removeAt(size + 1)
    b.removeAt(0)
    var time = -1
    if (a.filter { it == "1" }.size == b.filter { it == "1" }.size) {
        time += 1
        var s = MutableList(size) { -2 }
        for (i in 0..size - 1) {
            when {
                a[i] == b[i] -> s[i] = 0
                a[i] == "1" -> s[i] = 1
                else -> s[i] = -1
            }
        }

        s = s.filter { it != 0 }.toMutableList()


        while (!s.isEmpty()) {
            //println("a")
            var index = 0
            for (i in 1..s.size - 1) {
                if (s[index] + s[i] == 0) {
                    s[index] = 0
                    s[i] = 0
                    if (i < s.size - 1) {
                        index = i + 1
                    }
                }
            }
            time += 1
            s = s.filter { it != 0 }.toMutableList()
        }
    }
    println(time)

}

Wrong answer on test 8


E - Binary Subsequence Rotation

fun main() {
    val size = readLine()!!.toInt()

    val a = readLine()!!.split("").toMutableList()
    a.removeAt(size + 1)
    a.removeAt(0)

    val b = readLine()!!.split("").toMutableList()
    b.removeAt(size + 1)
    b.removeAt(0)

    val s = MutableList(size) {0}
    for (i in 0..size - 1) {
        when {
            a[i] == b[i] -> s[i] = 0
            a[i] == "1" -> s[i] = 1
            else -> s[i] = -1
        }
    }

    // Num of 0 and 1 are different
    if (s.sum()!=0) {
        println(-1)
    } else {
        println(maxOf(getRotateTime(s, -1), getRotateTime(s, 1)))
    }


}

fun getRotateTime(list: List<Int>, int: Int) : Int {
    var max = 0
    var acc = 0
    for (i in 0..list.size-1) {
        acc += int * list[i]
        max = maxOf(max, acc)
        if (acc < 0) {
            acc = 0
        }
    }
    return max
}

Accepted
