B. Subsequence Hate
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Shubham has a binary string 𝑠. A binary string is a string containing only characters "0" and "1".

He can perform the following operation on the string any amount of times:

Select an index of the string, and flip the character at that index. This means, if the character was "0", it becomes "1", and vice versa.
A string is called good if it does not contain "010" or "101" as a subsequence  — for instance, "1001" contains "101" as a subsequence, hence it is not a good string, while "1000" doesn't contain neither "010" nor "101" as subsequences, so it is a good string.

What is the minimum number of operations he will have to perform, so that the string becomes good? It can be shown that with these operations we can make any string good.

A string 𝑎 is a subsequence of a string 𝑏 if 𝑎 can be obtained from 𝑏 by deletion of several (possibly, zero or all) characters.

Input
The first line of the input contains a single integer 𝑡 (1≤𝑡≤100) — the number of test cases.

Each of the next 𝑡 lines contains a binary string 𝑠 (1≤|𝑠|≤1000).

Output
For every string, output the minimum number of operations required to make it good.


fun main() {
    repeat(readLine()!!.toInt()) {
        val numList = readLine()!!.split("").filter { it.length != 0 }.map { it.toInt() }
        val num_ones = numList.count{ it == 1}
        val num_zeros = numList.count { it == 0 }
        var done_ones = 0
        var done_zeros = 0
        var one_first = Int.MAX_VALUE
        var zeros_first = Int.MAX_VALUE
        for (item in numList) {
            when(item) {
                1 -> done_ones += 1
                else -> done_zeros += 1
            }
            one_first = minOf(one_first, done_zeros + num_ones - done_ones)
            zeros_first = minOf(zeros_first, done_ones + num_zeros - done_zeros)
        }
        val result = if (one_first < zeros_first) one_first else zeros_first
        println(result)

    }
}


accepted
