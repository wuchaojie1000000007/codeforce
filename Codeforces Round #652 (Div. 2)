A - FashionabLee

fun main() {
    repeat(readLine()!!.toInt()) {
        val convexNumber = readLine()!!.toInt()
        println(if (convexNumber%4 == 0 )"YES" else "NO")
    }
}


AccurateLee

fun main() {
    repeat(readLine()!!.toInt()) {
        val size = readLine()!!.toInt()
        val str = readLine()!!.split("").filter { it.length > 0 }.map { it.toInt() }
        var num0 = 0
        var num1 = 0
        for (index in 0..size - 1) {
            if (str[index] == 0) {
                num0 += 1
            } else break
        }
        for (index in size - 1 downTo 0) {
            //println(str[index])
            if (str[index] == 1) {
                num1 += 1
            } else break
        }
        //println(str)
        var mid = false
        if (size > num0 + num1) {
            mid = true
        }
        //println("0: $num0 1: $num1")
        val cleanStr:String
        if (mid) {
            cleanStr = (List(num0 + 1) { 0 } + List(num1) { 1 }).joinToString("")
        } else {
            cleanStr = (List(num0) { 0 } + List(num1) { 1 }).joinToString("")
        }
        println(cleanStr)
    }
}


C - RationalLee

fun main() {
    repeat(readLine()!!.toInt()) {
        val (num, friend) = readLine()!!.split(" ").map { it.toInt() }
        val numList = readLine()!!.split(" ").map { it.toLong() }.sortedDescending()
        val giveNum = readLine()!!.split(" ").map { it.toInt() }.sorted()
        var index = friend-1
        var sum = 0L
        for (item in giveNum){
            if (item != 1) {
                index +=item-1
                //println(index)
                sum += numList[index]
            }
        }
        //println("sum: $sum")
        sum += numList.take(friend).sum()
        val give1Num = giveNum.count { it == 1 }
        sum += numList.take(give1Num).sum()
        println(sum)
    }
}


D - TediousLee

fun main() {
    val baseLineKey = List(334) {it * 6000}.sortedDescending()
    //print(baseLineKey)
    val baseLineValue = baseLineKey.map { findClaw(it) }
    //print(baseLineValue)
    val baseLineMap = mutableMapOf<Int, Long>()
    for (i in 0..333) {
        baseLineMap += Pair(baseLineKey[i], baseLineValue[i])
    }
    repeat(readLine()!!.toInt()) {
        var level = readLine()!!.toInt()
        var index = 0
        while (index <334 && level<baseLineKey[index]) {
            index += 1
        }
        //print(index)
        val baseLevel = baseLineKey[index]
        //println(baseLevel)
        val claw = baseLineMap[baseLevel]
        //println(claw)
        println(findClaw(level-baseLevel, claw!!) * 4 % 1000000007)
    }
}

fun getContex(level: Int): Long {
    if (level == 1) return 1
    if (level == 2) return 2
    if (level == 3) return 5
    else return getContex(level - 1) * 2 + getContex(level - 2) - getContex(level - 3) * 2
}

fun getClaw(level: Int): Long {
    if (level == 1) return 0
    if (level == 2) return 0
    if (level == 3) return 1
    else return getClaw(level - 3) + getContex(level - 2) - getContex(level - 3)
}

fun findContex(level: Int): Long {
    var contex = 0L
    for (i in 1..level) {
        if (i % 2 == 0) {
            contex *= 2
        } else {
            contex = contex * 2 + 1
        }
    }
    return contex
}

// 2 2 +1 -1 +1 2
fun findClaw(int: Int, long: Long): Long {
    var level = int
    var claw = long
    val bigFor = level / 30
    level = level % 30
    val midFor = level / 6
    val smallFor = level % 6
    for (i in 1..bigFor) {
        claw = 1073741824 * claw + 102261126
        //claw = 64*64*64*64*64*claw + 64*64*64*64*6 + 64*64*64*6 + 64*64*6 + 64*6 + 6
        claw %= 1000000007
    }
    for (i in 1..midFor) {
        claw = 64*claw +6
        claw %= 1000000007
    }
    when (smallFor) {
        1 -> claw = claw * 2
        2 -> claw = claw * 4
        3 -> claw = claw * 8 + 1
        4 -> claw = claw * 16 + 1
        5 -> claw = claw * 32 + 3
    }
    claw %= 1000000007

    return claw
}

/*
fun findClaw(level: Int): Long {
    var claw = 0L

    for (i in 1..level) {

        when (i % 6) {
            0 -> claw = claw * 2
            1 -> claw = claw * 2
            2 -> claw = claw * 4
            3 -> claw = claw * 8 + 1
            4 -> claw = claw * 16 + 1
            5 -> claw = claw * 32 + 3
        }
        claw %= 1000000007

    }
    return claw
}
*/


fun findClaw(int: Int): Long {
    var level = int
    var claw = 0L
    val bigFor = level / 6
    val smallFor = level % 6

    for (i in 1..bigFor) {
        claw = 64 * claw + 6
        claw %= 1000000007
    }
    when (smallFor) {
        1 -> claw = claw * 2
        2 -> claw = claw * 4
        3 -> claw = claw * 8 + 1
        4 -> claw = claw * 16 + 1
        5 -> claw = claw * 32 + 3
    }
    claw %= 1000000007

    return claw
}

accepted
