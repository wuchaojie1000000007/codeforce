A - Three Pairwise Maximums

fun main() {
    repeat(readLine()!!.toInt()) {
        val (x, y, z) = readLine()!!.split(" ").map { it.toInt() }
        var print = false
        val max = maxOf(x, y, z)
        if ((x == max && y == max) || (y == max && z == max) || (z == max && x == max)) {
            println("Yes")
            val a = maxOf(x, y, z)
            val b = minOf(x, y, z)
            val c = 1
            println("$a $b $c")
        } else {
            println("NO")
        }
    }
}

Accepted


B - Restore the Permutation by Merger

fun main() {
    repeat(readLine()!!.toInt()) {
        val length = readLine()!!.toInt()
        val merged = readLine()!!.split(" ").map { it.toInt() }
        val result = mutableListOf<Int>()
        merged.forEach {
            if (it !in result)
                result += it
        }
        println(result.joinToString(" "))
    }
}

Accepted


C - Make It Good

fun main() {
    repeat(readLine()!!.toInt()) {
        val size = readLine()!!.toInt()
        val arr = readLine()!!.split(" ").map { it.toInt() }.reversed()
        var up = true
        var number = 0
        var index = 0
        while (index<size-1&&arr[index]<=arr[index+1]){
            index += 1
        }
        while (index<size-1&&arr[index]>=arr[index+1]){
            index += 1
        }
        println(size-index-1)
    }
}

Accepted	


D - a-Good String

val charSet = listOf<Char>(
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's'
)

fun main() {
    repeat(readLine()!!.toInt()) {
        val length = readLine()!!.toInt()
        val str = readLine()!!
        println(move(str, 0, length-1, 0))
    }
}

fun move(arr: String, start: Int, end: Int, to: Int): Int {
    when {
        start == end && arr[start] == charSet[to] -> return 0
        start == end && arr[start] != charSet[to] -> return 1
    }

    var leftCost = 0
    (start..start + (end - start) / 2).forEach {
        if (arr[it] != charSet[to]) {
            leftCost += 1
        }
    }
    var rightCost = 0
    (start + (end - start) / 2 + 1..end).forEach {
        if (arr[it] != charSet[to]) {
            rightCost += 1
        }
    }
    val minMove = minOf(
        leftCost + move(arr, start + (end - start) / 2 + 1, end, to + 1),
        rightCost + move(arr, start, start + (end - start) / 2, to + 1)
    )
    return minMove
}

Accepted	


class Graph(val vertices: Int) {

    private val adjacentList = Array(vertices) { arrayListOf<Int>() }
    //private val adjacentList = List(vertices) { mutableListOf<Int>() }

    fun addEdge(u: Int, v: Int) {
        adjacentList[u].plusAssign(v)
    }

    // If has topological sorted list, return it, else return null.
    fun topologicalSort(): List<Int>? {

        // Indegree for each vertices.
        val indegree = IntArray(vertices) { 0 }

        // Fill up indegree.
        adjacentList.forEach {
            it.forEach {
                indegree[it] += 1
            }
        }

        // Store result.
        val topologicalList = arrayListOf<Int>()

        // Indegree is 0.
        val queue = mutableListOf<Int>()

        // How many vertices are removed.
        var count = 0

        // Init queue.
        for (i in 0 until vertices) {
            if (indegree[i] == 0)
                queue += i
        }

        // There are vertices can be remove.
        while (queue.isNotEmpty()) {

            // Remove the first one, also can remove any one.
            val u = queue.removeAt(0)
            topologicalList += u
            count += 1

            // The indegree of neighbor minus one.
            adjacentList[u].forEach {
                indegree[it] -= 1

                // If indegree become zero, put it in queue.
                if (indegree[it] == 0)
                    queue += it
            }
        }

        return if (count == vertices) topologicalList else null
    }
}

fun main() {
    repeat(readLine()!!.toInt()) {
        val (vertices, edge) = readLine()!!.split(" ").map { it.toInt() }
        val edges = mutableListOf<Triple<Int, Int, Int>>()
        val graph = Graph(vertices)
        repeat(edge) {
            val (directed, u, v) = readLine()!!.split(" ").map { it.toInt() }
            edges += Triple(directed, u - 1, v - 1)
            if (directed == 1)
                graph.addEdge(u - 1, v - 1)
        }
        val topologicalSort = graph.topologicalSort()
        if (topologicalSort == null)
            println("NO")
        else {
            println("YES")

            var index = 0
            val position = IntArray(vertices) { -1 }

            topologicalSort.forEach {
                position[it] = index
                index += 1
            }

            edges.forEach {
                if (it.first == 1) {
                    println("${it.second + 1} ${it.third + 1}")
                } else {
                    println(if (position[it.second] < position[it.third]) "${it.second + 1} ${it.third + 1}" else "${it.third + 1} ${it.second + 1}")

                }
            }
        }
    }
}

Time limit exceeded on test 7

